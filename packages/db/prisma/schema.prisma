generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
  binaryTargets   = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id              String    @id @default(cuid())
  aura            Int       @default(0)
  username        String    @unique
  displayName     String
  displayUsername String?
  mentions        Mention[]
  email           String?   @unique
  passwordHash    String?
  googleId        String?   @unique
  githubId        String?   @unique
  discordId       String?   @unique
  twitterId       String?   @unique
  redditId        String?   @unique
  avatarUrl       String?
  avatarKey       String?
  bio             String?
  emailVerified   Boolean   @default(false)
  emailVerifiedAt DateTime?
  image           String?
  name            String?
  role            String    @default("user")

  sessions              Session[]
  accounts              Account[]
  verifications         Verification[]
  passwordResetTokens   PasswordResetToken[]
  posts                 Post[]
  following             Follow[]             @relation("Following")
  followers             Follow[]             @relation("Followers")
  bookmarks             Bookmark[]
  comments              Comment[]
  vote                  Vote[]
  receivedNotifications Notification[]       @relation("Recipient")
  issuedNotifications   Notification[]       @relation("Issuer")
  hnbookmark            HNBookmark[]
  auraReceived          AuraLog[]            @relation("AuraReceived")
  auraIssued            AuraLog[]            @relation("AuraIssued")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model AuraLog {
  id        String   @id @default(cuid())
  userId    String
  issuerId  String
  amount    Int
  type      AuraType
  postId    String?
  commentId String?
  createdAt DateTime @default(now())

  user    User     @relation("AuraReceived", fields: [userId], references: [id])
  issuer  User     @relation("AuraIssued", fields: [issuerId], references: [id])
  post    Post?    @relation(fields: [postId], references: [id])
  comment Comment? @relation(fields: [commentId], references: [id])

  @@map("aura_logs")
}

enum AuraType {
  POST_CREATION
  POST_ATTACHMENT_BONUS
  POST_VOTE
  POST_VOTE_REMOVED
  POST_VIEWS_MILESTONE
  COMMENT_CREATION
  COMMENT_RECEIVED
  FOLLOW_GAINED
  FOLLOW_GIVEN
  POST_BOOKMARKED
  POST_BOOKMARK_RECEIVED
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  expiresAt DateTime

  @@index([token])
  @@map("password_reset_tokens")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model Account {
  id                    String    @id @default(cuid())
  userId                String
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  idToken               String?
  password              String?
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([providerId, accountId])
  @@map("accounts")
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  userId     String?
  user       User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("verification")
}

model Follow {
  followerId  String
  follower    User   @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)
  followingId String
  following   User   @relation("Followers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("follows")
}

model Post {
  id                   String         @id @default(cuid())
  content              String
  userId               String
  user                 User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  aura                 Int            @default(0)
  viewCount            Int            @default(0)
  lastAwardedViewCount Int            @default(0)
  attachments          Media[]
  bookmarks            Bookmark[]
  comments             Comment[]
  linkedNotifications  Notification[]
  vote                 Vote[]
  shareStats           ShareStats[]
  auraLogs             AuraLog[]
  tags                 Tag[]
  mentions             Mention[]
  hnStoryShare         HNStoryShare?

  createdAt DateTime @default(now())

  @@map("posts")
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     Post[]
}

model Media {
  id        String    @id @default(cuid())
  postId    String?
  post      Post?     @relation(fields: [postId], references: [id], onDelete: SetNull)
  type      MediaType
  url       String
  key       String    @default("")
  mimeType  String    @default("application/octet-stream")
  size      Int       @default(0)
  createdAt DateTime  @default(now())

  @@map("post_media")
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
  CODE
}

model Vote {
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  value  Int

  @@unique([userId, postId])
  @@map("votes")
}

model Bookmark {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([userId, postId])
  @@map("bookmarks")
}

model HNBookmark {
  id        String   @id @default(cuid())
  userId    String
  storyId   Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, storyId])
  @@index([userId])
}

model HNStoryShare {
  id          String   @id @default(cuid())
  postId      String   @unique
  post        Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  storyId     Int
  title       String
  url         String?
  by          String
  time        Int
  score       Int
  descendants Int
  createdAt   DateTime @default(now())

  @@map("hn_story_shares")
}

model Comment {
  id        String    @id @default(cuid())
  content   String
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    String
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  auraLogs  AuraLog[]

  @@map("comments")
}

model Notification {
  id          String           @id @default(cuid())
  recipientId String
  recipient   User             @relation("Recipient", fields: [recipientId], references: [id], onDelete: Cascade)
  issuerId    String
  issuer      User             @relation("Issuer", fields: [issuerId], references: [id], onDelete: Cascade)
  postId      String?
  post        Post?            @relation(fields: [postId], references: [id], onDelete: Cascade)
  type        NotificationType
  read        Boolean          @default(false)

  createdAt DateTime @default(now())

  @@map("notifications")
}

enum NotificationType {
  AMPLIFY
  FOLLOW
  COMMENT
  MENTION
}

model Mention {
  id        String   @id @default(cuid())
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([postId, userId])
  @@map("mentions")
}

model ShareStats {
  id        String   @id @default(cuid())
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  platform  String
  shares    Int      @default(0)
  clicks    Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([postId, platform])
  @@map("share_stats")
}

model jwks {
  id         String   @id @default(cuid())
  publicKey  String
  privateKey String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

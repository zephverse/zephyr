name: Version Bump

on:
  push:
    branches:
      - development
  workflow_dispatch:
    inputs:
      bump_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major
      custom_version:
        description: 'Custom version (leave empty for auto-bump)'
        required: false
        type: string

jobs:
  version-bump:
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          token: ${{ secrets.GH_TOKEN }}
          ref: development

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: 'latest'

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 'latest'

      - name: Install dependencies
        run: bun install

      - name: Run lint and format
        run: bun run check

      - name: Update version in package.json files
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")

          if [ -n "${{ github.event.inputs.custom_version }}" ]; then
            NEW_VERSION="${{ github.event.inputs.custom_version }}"
            echo "Using custom version: $NEW_VERSION"
          else

            BUMP_TYPE="${{ github.event.inputs.bump_type }}"

            IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
            MAJOR=${VERSION_PARTS[0]}
            MINOR=${VERSION_PARTS[1]}
            PATCH=$(echo ${VERSION_PARTS[2]} | sed 's/-dev//')

            case $BUMP_TYPE in
              major)
                MAJOR=$((MAJOR + 1))
                MINOR=0
                PATCH=0
                ;;
              minor)
                MINOR=$((MINOR + 1))
                PATCH=0
                ;;
              patch)
                PATCH=$((PATCH + 1))
                ;;
            esac

            NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}-dev"
          fi

          echo "Updating version from $CURRENT_VERSION to $NEW_VERSION"

          sed -i "s/\"version\": \".*\"/\"version\": \"$NEW_VERSION\"/" package.json
          if [ -f "apps/web/package.json" ]; then
            sed -i "s/\"version\": \".*\"/\"version\": \"$NEW_VERSION\"/" apps/web/package.json
          fi
          if [ -f "apps/auth/package.json" ]; then
            sed -i "s/\"version\": \".*\"/\"version\": \"$NEW_VERSION\"/" apps/auth/package.json
          fi
          find packages -name "package.json" -type f -exec sed -i "s/\"version\": \".*\"/\"version\": \"$NEW_VERSION\"/" {} \;

          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Commit and push changes
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

          git add package.json
          if [ -f "apps/web/package.json" ]; then
            git add apps/web/package.json
          fi
          if [ -f "apps/auth/package.json" ]; then
            git add apps/auth/package.json
          fi
          git add packages/*/package.json
          git commit -m "chore: bump version to ${{ env.NEW_VERSION }} [skip ci]"
          git push origin development